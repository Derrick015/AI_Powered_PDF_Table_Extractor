image: google/cloud-sdk:latest

stages:
  - test
  - security
  - build
  - scan
  - deploy

variables:
  PROJECT_ID: "deron-innovations"
  REGION: "us-central1"
  REPO: "ai-powered-pdf-table-extractor-repo" # name of the repo in the artifact registry
  REGISTRY: "us-central1-docker.pkg.dev" # registry url
  CLUSTER: "ai-powered-pdf-table-extractor-cluster" # name of the cluster in the gke
  DOCKER_IMAGE: "$REGISTRY/$PROJECT_ID/$REPO/ai-powered-pdf-table-extractor:latest"
  # Security scan thresholds
  SECURITY_ALLOW_MEDIUM: "true"
  SECURITY_ALLOW_HIGH: "false"

# ============================================================================
# TEST STAGE
# ============================================================================

unit_tests:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends 
        build-essential 
        libmupdf-dev 
        mupdf-tools
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Running unit tests..."
    - pytest tests/ -v --tb=short -m "unit or not integration" --junitxml=report.xml --cov=src --cov-report=term --cov-report=xml:coverage.xml --cov-report=html:htmlcov
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
      - coverage.xml
      - report.xml
    expire_in: 30 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'

integration_tests:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends 
        build-essential 
        libmupdf-dev 
        mupdf-tools
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Running integration tests..."
    - pytest tests/ -v --tb=short -m "integration" --junitxml=integration-report.xml
  artifacts:
    when: always
    reports:
      junit: integration-report.xml
    paths:
      - integration-report.xml
    expire_in: 30 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
  allow_failure: true

code_quality:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install flake8 pylint bandit black isort mypy
  script:
    - echo "Running code quality checks..."
    - flake8 src/ --max-line-length=120 --extend-ignore=E203,W503 --count --statistics || true
    - pylint src/ --max-line-length=120 --disable=C0111,R0903 || true
    - black --check src/ || true
    - isort --check-only src/ || true
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# ============================================================================
# SECURITY STAGE
# ============================================================================

# SAST - Static Application Security Testing
sast:
  stage: security
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Secret Detection - Scan for exposed secrets
secret_detection:
  stage: security
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Dependency Scanning - Check for vulnerable dependencies
dependency_scanning:
  stage: security
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Python Security Scanning with Bandit
bandit_security_scan:
  stage: security
  image: python:3.11-slim
  before_script:
    - pip install bandit[toml]
  script:
    - echo "Running Bandit security scan..."
    - bandit -r src/ -f json -o bandit-report.json || true
    - bandit -r src/ -f screen
  artifacts:
    paths:
      - bandit-report.json
    expire_in: 30 days
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Safety - Check Python dependencies for known security vulnerabilities
safety_check:
  stage: security
  image: python:3.11-slim
  before_script:
    - pip install safety
  script:
    - echo "Checking for vulnerable dependencies..."
    - safety check --json --file requirements.txt --output safety-report.json || true
    - safety check --file requirements.txt
  artifacts:
    paths:
      - safety-report.json
    expire_in: 30 days
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Trivy - Filesystem vulnerability scanning
trivy_fs_scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - echo "Running Trivy filesystem scan..."
    - trivy fs --exit-code 0 --no-progress --format json --output trivy-fs-report.json .
    - trivy fs --exit-code 0 --severity HIGH,CRITICAL --no-progress .
  artifacts:
    paths:
      - trivy-fs-report.json
    expire_in: 30 days
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# ============================================================================
# BUILD STAGE
# ============================================================================

build_docker_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 curl bash
    - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts > /dev/null
    - export PATH=$PATH:/root/google-cloud-sdk/bin
    - echo "$GCP_SERVICE_KEY" | base64 -d > gcp-key.json
    - gcloud auth activate-service-account --key-file=gcp-key.json
    - gcloud auth configure-docker $REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - echo "Pushing Docker image to registry..."
    - docker push $DOCKER_IMAGE
  needs:
    - job: unit_tests
      artifacts: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# ============================================================================
# SCAN STAGE (Post-Build Container Scanning)
# ============================================================================

# Container Scanning - Scan Docker image for vulnerabilities
container_scanning:
  stage: scan
  image: aquasec/trivy:latest
  needs:
    - build_docker_image
  before_script:
    - apk add --no-cache curl bash
    - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts > /dev/null
    - export PATH=$PATH:/root/google-cloud-sdk/bin
    - echo "$GCP_SERVICE_KEY" | base64 -d > gcp-key.json
    - gcloud auth activate-service-account --key-file=gcp-key.json
    - gcloud auth configure-docker $REGISTRY
  script:
    - echo "Scanning Docker image for vulnerabilities..."
    - trivy image --exit-code 0 --no-progress --format json --output trivy-container-report.json $DOCKER_IMAGE
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --no-progress $DOCKER_IMAGE
    - |
      # Count critical and high vulnerabilities
      CRITICAL=$(cat trivy-container-report.json | grep -o '"Severity":"CRITICAL"' | wc -l)
      HIGH=$(cat trivy-container-report.json | grep -o '"Severity":"HIGH"' | wc -l)
      echo "Found $CRITICAL CRITICAL and $HIGH HIGH severity vulnerabilities"
      # Fail if critical vulnerabilities found (can be adjusted)
      if [ "$CRITICAL" -gt 0 ]; then
        echo "❌ Critical vulnerabilities found! Please review and fix."
        exit 1
      fi
  artifacts:
    paths:
      - trivy-container-report.json
    expire_in: 30 days
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# ============================================================================
# DEPLOY STAGE
# ============================================================================

deploy_to_gke:
  stage: deploy
  needs:
    - build_docker_image
    - container_scanning
  before_script:
    - echo "$GCP_SERVICE_KEY" | base64 -d > gcp-key.json
    - gcloud auth activate-service-account --key-file=gcp-key.json
    - gcloud config set project $PROJECT_ID
  script:
    - echo "Deploying to GKE..."
    - gcloud container clusters get-credentials $CLUSTER --region $REGION --project $PROJECT_ID
    - kubectl apply -f kubernetes-deployment.yaml
    - echo "Deployment completed successfully!"
  only:
    - main
  environment:
    name: production
    url: https://your-app-url.com

# ============================================================================
# SECURITY TEMPLATES (GitLab Auto DevOps)
# ============================================================================

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
